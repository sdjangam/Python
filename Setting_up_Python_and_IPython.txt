python â€“version
python hello.py
python -h

def add_numbers(a, b):    """    Add two numbers together    Returns    -------    the_sum : type of arguments    """    return a + b
add_numbers?
add_numbers??


===


def func1(a, b):
    return a / b

def func2(x):
    a = x
    b = x - 1
    return func1(a, b)
    
func2(1)

%xmode Plain
func2(1)

%xmode Verbose
func2(1)

%debug
print(a)
print(b)
quit

%debug
up
up
down
quit

%pdb on
func2(1)


====

%timeit sum(range(100))

%%timeit
total = 0
for i in range(1000):
    for j in range(1000):
        total += i * (-1) ** j
        
import random
L = [random.random() for i in range(100000)]
%timeit L.sort()

import random
L = [random.random() for i in range(100000)]
print("sorting an unsorted list:")
%time L.sort()


%%time
total = 0
for i in range(1000):
    for j in range(1000):
        total += i * (-1) ** j
        
def sum_of_lists(N):
    total = 0
    for i in range(5):
        L = [j ^ (j >> i) for j in range(N)]
        total += sum(L)
    return total
 
%prun sum_of_lists(1000000)


pip install line_profiler

%load_ext line_profiler
%lprun -f sum_of_lists sum_of_lists(5000)

pip install memory_profiler
%load_ext memory_profiler
%memit sum_of_lists(1000000)
%%file mprun_demo.pydef sum_of_lists(N):    total = 0    for i in range(5):        L = [j ^ (j >> i) for j in range(N)]        total += sum(L)
		abcd=range(0,10000)        del L # remove reference to L    return total
from mprun_demo import sum_of_lists%mprun -f sum_of_lists sum_of_lists(10000)


=====================================================
